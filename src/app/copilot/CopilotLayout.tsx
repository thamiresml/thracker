'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { Application } from '@/types/common';
import { ChevronDown, ChevronUp, AlertCircle, Loader2, Lightbulb, AlertTriangle } from 'lucide-react';
import ApplicationSelector from './components/ApplicationSelector';
import CompatibilityScore from './components/CompatibilityScore';
import CoverLetterEditor from './components/CoverLetterEditor';
import AgentProfile from './components/AgentProfile';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import { createClient } from '@/utils/supabase/client';
import {
  uploadBaseCoverLetter,
  getLatestResume,
  getLatestCoverLetter,
  ensureBucketExists,
  checkAuth,
  uploadCoverLetter,
  uploadResume
} from './utils/storage';
import { createTextFile } from '@/lib/document-handler';
import LoadingState from '@/components/ui/LoadingState';

// DO NOT use BUCKET_NAME directly, rely on the storage.ts utility functions
// that handle bucket name internally
// const BUCKET_NAME = 'user_documents';

interface CopilotLayoutProps {
  applications: Application[];
}

// Default resume template (remains the same)
function getDefaultResume() {
  return `[Your Name]\n[Your Address]\n[Your Email] | [Your Phone] | [Your LinkedIn]\n\nSUMMARY\n[Brief professional summary highlighting your key skills and experience]\n\nSKILLS\n• [Key Skill 1]\n• [Key Skill 2]\n• [Key Skill 3]\n• [Key Skill 4]\n\nEXPERIENCE\n[Company Name] | [Location]\n[Position Title] | [Start Date] - [End Date]\n• [Accomplishment or responsibility]\n• [Accomplishment or responsibility]\n• [Accomplishment or responsibility]\n\n[Company Name] | [Location]\n[Position Title] | [Start Date] - [End Date]\n• [Accomplishment or responsibility]\n• [Accomplishment or responsibility]\n• [Accomplishment or responsibility]\n\nEDUCATION\n[Degree], [Major] | [University] | [Graduation Year]\n`;
}

export default function CopilotLayout({ applications }: CopilotLayoutProps) {
  const [selectedApplication, setSelectedApplication] = useState<Application | null>(null);
  // Document State
  const [resumeContent, setResumeContent] = useState<string>(''); // Actual text content for agent
  const [resumePdfUrl, setResumePdfUrl] = useState<string>(''); // URL for PDF viewer
  const [baseCoverLetterContent, setBaseCoverLetterContent] = useState<string>(''); // Base CL from storage
  const [generatedCoverLetter, setGeneratedCoverLetter] = useState<string>(''); // CL generated by agent
  const [currentCoverLetter, setCurrentCoverLetter] = useState<string>(''); // Editable CL content in editor
  // Agent Results State
  const [compatibilityScore, setCompatibilityScore] = useState<number | null>(null);
  const [analysisText, setAnalysisText] = useState<string>('');
  const [suggestions, setSuggestions] = useState<Array<{id: string, original: string, suggestion: string, accepted: boolean}>>([]);
  // Loading and Error State
  const [loadingState, setLoadingState] = useState<{
    initialDocs: boolean;
    resume: boolean;
    coverLetter: boolean;
    agent: boolean;
  }>({
    initialDocs: true,
    resume: false, // For specific resume actions like upload/save
    coverLetter: false, // For specific CL actions like save
    agent: false // When agent is running
  });
  const [error, setError] = useState<string | null>(null);
  // UI State
  const [agentSettings, setAgentSettings] = useState({
    tone: 'professional',
    focusArea: 'technical',
    detailLevel: 'balanced'
  });
  const [uploadSuccessMessage, setUploadSuccessMessage] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const supabase = createClient();
  const [userId, setUserId] = useState<string | null>(null);
  // Job Description Toggle
  const [showJobDescription, setShowJobDescription] = useState(false);
  // Escape key closes job description
  useEffect(() => {
    if (!showJobDescription) return;
    const handleEsc = (e: KeyboardEvent) => {
      if (e.key === 'Escape') setShowJobDescription(false);
    };
    window.addEventListener('keydown', handleEsc);
    return () => window.removeEventListener('keydown', handleEsc);
  }, [showJobDescription]);

  // Get user ID on mount
  useEffect(() => {
    const getUserId = async () => {
      try {
        const id = await checkAuth();
        setUserId(id);
      } catch (err: any) {
        setError(err.message || 'Authentication error');
        setLoadingState(prev => ({ ...prev, initialDocs: false }));
      }
    };
    getUserId();
  }, []);

  // Load initial base documents (resume, base cover letter) when userId is available
  useEffect(() => {
    if (!userId) return;

    const fetchInitialDocuments = async () => {
      setLoadingState(prev => ({ ...prev, initialDocs: true }));
      setError(null);
      let resumeFound = false;
      let coverLetterFound = false;

      try {
        // Only set default resume content; actual resume text will be set by API response
        setResumeContent(getDefaultResume());
        setResumePdfUrl('');

        // Attempt to fetch latest base cover letter
        const baseCL = await getLatestCoverLetter(userId);
        if (baseCL !== null) {
          setBaseCoverLetterContent(baseCL);
          setCurrentCoverLetter(baseCL);
          coverLetterFound = true;
        } else {
          setBaseCoverLetterContent('');
          setCurrentCoverLetter('');
        }

      } catch (err: any) {
        console.error('Error fetching initial documents:', err);
        setError(`Error loading documents: ${err.message}. Ensure storage is set up correctly.`);
        if (!resumeFound) setResumeContent(getDefaultResume());
        if (!coverLetterFound) setCurrentCoverLetter('');
      } finally {
        setLoadingState(prev => ({ ...prev, initialDocs: false }));
      }
    };

    fetchInitialDocuments();
  }, [userId]);

  // Run analysis when application selected, resume content available, and agent not already running
  useEffect(() => {
    if (!selectedApplication || !resumeContent || loadingState.agent || loadingState.initialDocs) {
        // Reset results if selection changes or resume isn't ready
        setCompatibilityScore(null);
        setAnalysisText('');
        setSuggestions([]);
        setGeneratedCoverLetter('');
        // Reset editable cover letter to base if a new job is selected and no agent run yet
        if (!loadingState.agent) {
            setCurrentCoverLetter(baseCoverLetterContent || '');
        }
        return;
    }

    const analyzeJob = async () => {
      if (!userId) {
          setError('User ID not found. Cannot run analysis.');
          return;
      }
      setLoadingState(prev => ({ ...prev, agent: true }));
      setError(null);
      setCompatibilityScore(null); // Reset score during loading
      setAnalysisText('Analyzing...');
      setSuggestions([]);

      try {
        console.log(`Running agent for App ID: ${selectedApplication.id}`);
        const response = await fetch('/api/copilot', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            applicationId: selectedApplication.id,
            agentSettings,
            baseCoverLetter: baseCoverLetterContent
          }),
        });

        if (!response.ok) {
            const errorBody = await response.text();
            console.error('API Error Response:', errorBody);
            throw new Error(`Agent API error: ${response.status} - ${errorBody || response.statusText}`);
        }

        const data = await response.json();
        console.log('Agent response received:', data);

        setCompatibilityScore(data.compatibilityScore ?? null);
        setAnalysisText(data.analysisText ?? 'No analysis provided.');
        setSuggestions(data.suggestions ?? []);
        setGeneratedCoverLetter(data.coverLetter ?? '');
        setCurrentCoverLetter(data.coverLetter ?? baseCoverLetterContent ?? ''); // Update editor with generated CL

      } catch (err: any) {
        console.error('Error running copilot agent:', err);
        setError(err.message || 'Failed to analyze job application.');
        setAnalysisText('Error during analysis.'); // Show error in analysis area
      } finally {
        setLoadingState(prev => ({ ...prev, agent: false }));
      }
    };

    analyzeJob();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedApplication, resumeContent, agentSettings, userId]); // Rerun when these change (resumeContent might change if edited/uploaded)

  // --- Handlers ---

  const handleApplicationSelect = (application: Application | null) => {
    console.log('Selected application:', application?.id);
    setSelectedApplication(application);
    // Reset state when application changes
    setCompatibilityScore(null);
    setAnalysisText('');
    setSuggestions([]);
    setGeneratedCoverLetter('');
    setCurrentCoverLetter(baseCoverLetterContent || ''); // Reset CL editor to base
    setError(null); // Clear previous errors
  };

  const handleSuggestionToggle = (id: string, accepted: boolean) => {
    setSuggestions(prev =>
      prev.map(suggestion =>
        suggestion.id === id
          ? { ...suggestion, accepted }
          : suggestion
      )
    );
    // TODO: Consider applying accepted suggestions to a *preview* of the resume
    // For now, suggestions are just visual aids.
  };

  const handleCoverLetterUpdate = (content: string) => {
    setCurrentCoverLetter(content);
  };

  const handleAgentSettingsChange = (newSettings: typeof agentSettings) => {
    setAgentSettings(newSettings);
    // Re-running analysis is handled by the useEffect dependency on agentSettings
  };

  const handleResumeFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !userId) return;

    setLoadingState(prev => ({ ...prev, resume: true }));
    setError(null);
    setUploadSuccessMessage(null);

    try {
      // Upload the PDF to Supabase
      const timestamp = Date.now();
      const fileExt = file.name.split('.').pop();
      const fileName = `resume_${timestamp}.${fileExt}`;
      const filePath = `${userId}/${fileName}`;
      const { error: uploadError } = await supabase.storage
        .from('user_documents')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false,
        });
      if (uploadError) throw uploadError;
      setResumePdfUrl(`/storage/v1/object/public/user_documents/${userId}/${fileName}`);
      setUploadSuccessMessage('Resume uploaded successfully!');
      setTimeout(() => setUploadSuccessMessage(null), 3000);
    } catch (err: any) {
      console.error('Failed to upload resume:', err);
      setError(err.message || 'Failed to upload resume');
    } finally {
      setLoadingState(prev => ({ ...prev, resume: false }));
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const handleSaveCoverLetter = async () => {
    if (!selectedApplication || !userId) {
      setError("Application or User ID missing, cannot save cover letter.");
      return;
    }

    setLoadingState(prev => ({ ...prev, coverLetter: true }));
    setError(null);
    setUploadSuccessMessage(null);

    try {
      console.log(`Saving cover letter for App ID: ${selectedApplication.id}`);
      await uploadCoverLetter(userId, currentCoverLetter, selectedApplication.id.toString());

      setUploadSuccessMessage('Cover letter saved successfully for this application!');
      setTimeout(() => setUploadSuccessMessage(null), 3000);
    } catch (err: any) {
      console.error('Failed to save cover letter:', err);
      setError(err.message || 'Failed to save cover letter');
    } finally {
       setLoadingState(prev => ({ ...prev, coverLetter: false }));
    }
  };

  const handleSaveBaseCoverLetter = async () => {
    if (!userId) {
      setError("User ID missing, cannot save base cover letter.");
      return;
    }

    setLoadingState(prev => ({ ...prev, coverLetter: true }));
    setError(null);
    setUploadSuccessMessage(null);

    try {
      console.log('Saving current content as base cover letter template...');
      await uploadBaseCoverLetter(userId, currentCoverLetter);
      setBaseCoverLetterContent(currentCoverLetter); // Update internal base CL state

      setUploadSuccessMessage('Base cover letter template saved!');
      setTimeout(() => setUploadSuccessMessage(null), 3000);
    } catch (err: any) {
      console.error('Failed to save base cover letter:', err);
      setError(err.message || 'Failed to save base cover letter');
    } finally {
      setLoadingState(prev => ({ ...prev, coverLetter: false }));
    }
  };

  // Adjust handler signature and use state for content
  const handleGenerateFinalResume = async () => { // Removed argument
    if (!userId) {
      setError("User ID missing, cannot save resume.");
      return;
    }
    setLoadingState(prev => ({ ...prev, resume: true }));
    setError(null);
    setUploadSuccessMessage(null);

    try {
      // Use the content from the state
      const finalResumeContent = resumeContent; 

      console.log('Saving final resume content from state...');
      // Create a file object from the final text content
      const file = createTextFile(finalResumeContent, `resume_${Date.now()}.txt`); // Still saving as text

      const timestamp = Date.now();
      const fileName = `resume_${timestamp}.txt`;
      const filePath = `${userId}/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('user_documents') 
        .upload(filePath, finalResumeContent, {
          contentType: 'text/plain',
          upsert: false
        });

      if (uploadError) throw uploadError;

      // Maybe update the pdfUrl if a new PDF was generated?
      // For now, only text is updated.
      setUploadSuccessMessage('Resume text content updated successfully!');
      setTimeout(() => setUploadSuccessMessage(null), 3000);

    } catch (err: any) {
      console.error('Failed to save final resume:', err);
      setError(err.message || 'Failed to save resume');
    } finally {
      setLoadingState(prev => ({ ...prev, resume: false }));
    }
  };

  // --- Render Logic ---

  if (loadingState.initialDocs) {
      return <LoadingState message="Loading your documents..." />;
  }

  // Optional: More specific error handling for initial doc load failure
  // if (error && loadingState.initialDocs) { ... }

  return (
    <div className="flex h-[calc(100vh-64px)] w-full overflow-hidden bg-[var(--surface)] gap-6 p-6">
      {/* Left Column: Application Info */}
      <div className="w-1/4 min-w-[320px] max-w-sm flex flex-col gap-4 overflow-y-auto">
        <Card className="p-4">
          <AgentProfile onSettingsChange={handleAgentSettingsChange} />
        </Card>

        <Card className="p-4">
          <h3 className="font-semibold mb-3 text-lg text-[var(--foreground)]">Select Job Application</h3>
          <ApplicationSelector
            applications={applications}
            selectedApplication={selectedApplication}
            onSelect={handleApplicationSelect}
          />
          
          {selectedApplication?.job_description === '' && (
            <div className="mt-4 flex items-start gap-2 text-sm text-[var(--warning)] bg-[var(--warning)]/10 p-3 rounded-md">
              <AlertTriangle className="h-4 w-4 mt-0.5 flex-shrink-0" />
              <p>This job is missing a description. Please update it to enable compatibility scoring.</p>
            </div>
          )}

          {selectedApplication?.job_posting_url && (
            <Button
              variant="outline"
              className="mt-4 w-full"
              onClick={() => window.open(selectedApplication.job_posting_url, '_blank')}
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 mr-2">
                <path strokeLinecap="round" strokeLinejoin="round" d="M13.5 6H15a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1.5M12 9V3m0 0L9.75 5.25M12 3l2.25 2.25" />
              </svg>
              View Original Job Posting
            </Button>
          )}
        </Card>

        {selectedApplication && (
          <Card className="p-4">
            <CompatibilityScore
              score={compatibilityScore ?? 0}
              loading={loadingState.agent}
            />
          </Card>
        )}

        {selectedApplication && (
          <Card className="p-4">
            <button
              className="flex items-center gap-2 text-sm font-medium text-[var(--primary)] hover:underline mb-2 w-full"
              onClick={() => setShowJobDescription((v) => !v)}
              aria-expanded={showJobDescription}
              aria-controls="job-desc-toggle"
            >
              {showJobDescription ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
              {showJobDescription ? 'Hide' : 'Show'} Job Description
            </button>
            <div
              id="job-desc-toggle"
              className={`transition-all duration-200 ease-in-out overflow-hidden ${showJobDescription ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'}`}
              style={{ pointerEvents: showJobDescription ? 'auto' : 'none' }}
            >
              <div className="text-sm text-[var(--muted)] whitespace-pre-line mt-2">
                {selectedApplication.job_description || 'No job description provided.'}
              </div>
            </div>
          </Card>
        )}
      </div>

      {/* Middle Column: Cover Letter Editor */}
      <div className="flex-1 flex flex-col gap-4 overflow-y-auto">
        <Card className="p-6 flex-grow flex flex-col">
          <h2 className="font-semibold text-lg mb-4 text-[var(--foreground)]">Cover Letter</h2>
          {uploadSuccessMessage && (
            <div className="mb-4 rounded-md bg-[var(--success)]/10 p-3 text-sm text-[var(--success)] flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {uploadSuccessMessage}
            </div>
          )}
          {error && (
            <div className="mb-4 rounded-md bg-[var(--denied)]/10 p-3 text-sm text-[var(--denied)] flex items-center gap-2">
              <AlertCircle size={16} />
              {error}
            </div>
          )}
          <CoverLetterEditor
            content={currentCoverLetter}
            onChange={handleCoverLetterUpdate}
            onSave={handleSaveCoverLetter}
            onSaveAsTemplate={handleSaveBaseCoverLetter}
            loading={loadingState.agent || loadingState.coverLetter}
            jobDetails={selectedApplication ? {
              company: selectedApplication.companies?.name || 'Company',
              position: selectedApplication.position
            } : undefined}
          />
        </Card>
      </div>

      {/* Right Column: Agent Summary & Suggestions */}
      <div className="w-1/4 min-w-[320px] max-w-sm flex flex-col gap-4 overflow-y-auto">
        {selectedApplication && (
          <Card className="p-6">
            <h2 className="font-semibold text-lg mb-4 text-[var(--foreground)]">Agent Summary</h2>
            <div className="text-[var(--muted)] text-base">
              {loadingState.agent ? (
                <div className="flex items-center gap-2 text-sm italic">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Analyzing...
                </div>
              ) : analysisText ? (
                <p>{analysisText.length > 300 ? analysisText.slice(0, 300) + '...' : analysisText}</p>
              ) : (
                <p className="italic">Select a job to see analysis.</p>
              )}
            </div>
          </Card>
        )}

        {selectedApplication && (
          <Card className="p-6">
            <h2 className="font-semibold text-lg mb-4 text-[var(--foreground)]">Suggested Improvements</h2>
            {loadingState.agent ? (
              <div className="py-4 text-center text-[var(--muted)] flex items-center justify-center gap-2">
                <Loader2 className="h-4 w-4 animate-spin" />
                Searching for suggestions...
              </div>
            ) : suggestions.length > 0 ? (
              <div className="space-y-4 max-h-[400px] overflow-y-auto pr-2">
                {suggestions.map((suggestion) => (
                  <Card key={suggestion.id} className="p-4 text-sm bg-[var(--surface)] flex items-start gap-3">
                    <Lightbulb className="text-[var(--accent)] mt-1 flex-shrink-0" size={20} />
                    <div>
                      <Badge variant="secondary" className="mb-2">Original</Badge>
                      <p className="mb-3 text-[var(--foreground)]">{suggestion.original}</p>
                      <Badge variant="secondary" className="mb-2">Suggestion</Badge>
                      <p className="font-medium text-[var(--success)] bg-[var(--success)]/10 p-2 rounded">
                        {suggestion.suggestion}
                      </p>
                    </div>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="py-4 text-center text-[var(--muted)] italic">
                No suggestions found. Your resume looks good for this role!
              </div>
            )}
          </Card>
        )}
      </div>
    </div>
  );
}